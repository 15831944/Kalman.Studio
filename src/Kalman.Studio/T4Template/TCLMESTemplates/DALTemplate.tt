<#@ template language="C#" hostSpecific="true" debug="true" #>
<#@ output extension=".cs" #>
<# 
	TableHost host = (TableHost)(Host); 
	SOTable table = host.Table;
	List<SOColumn> list = host.ColumnList;	
	string nameSpace = host.GetString("NameSpace");
	string className = host.GetString("ClassName");
	if(string.IsNullOrEmpty(nameSpace))nameSpace = "Entity";
	if(string.IsNullOrEmpty(className))
	{
	  className = table.Name;
	  if(className.IndexOf("T_") == 0)
	  {
	     className = className.Substring(2);
	  }
	  if(className.IndexOf("t_") == 0)
	  {
	     className = className.Substring(2);
	  }
	  //string[] strs = className.Split('_');
	  //className = "";
	  //foreach(string str in strs)
	  {
	    //className += str.Substring(0,1).ToUpper()+str.Substring(1);
	  }
	}
	string pk = "";
	List<SOColumn> listPK = new List<SOColumn>();
	List<SOColumn> listCol = new List<SOColumn>();
	foreach (SOColumn c in list)
	{ 		  
	   if(c.PrimaryKey)
	   {
	      pk = c.Name;
	   }
	}
#>
using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using HW.Mix.Entity;
using HW.Mix.IDAL;
using HW.Mix.Common;

/**
 * Code By Ken.Liao
 **/
namespace <#= "HW.Mix.DAL" #>
{
	public class <#= className + "DAL" #> : BaseDALToSQLServer<<#= className + "Entity"#>>, <#= "I" + className + "DAL" #>
	{	    
	    #region 对象实例及构造函数

        public <#= className + "DAL" #>()
            : base("<#= table.Database.Name + "." + table.SchemaName + "." + table.Name #>", "<#= pk #>")
		{
		}

		#endregion

		/// <summary>
		/// 将DataReader的属性值转化为实体类的属性值，返回实体类
		/// </summary>
		/// <param name="dr">有效的DataReader对象</param>
		/// <returns>实体类对象</returns>
		protected override <#= className + "Entity"#> DataReaderToEntity(IDataReader dataReader)
		{
            <#= className + "Entity"#> info = new <#= className + "Entity"#>();

            SmartDataReader reader = new SmartDataReader(dataReader);

            <#
            string colStr = "";
	    foreach(SOColumn c in list)
	    { //string feild = c.Name.Substring(0,1).ToUpper()+c.Name.Substring(1);	  
		  string feild = c.Name;
	      colStr += c.Name + ",";
		  string tp = TypeUtil.DbType2TypeString(c.DataType);
		  if(c.NativeType.Equals("date")) tp = "DateTime";
		  string nl = "";
		  if(tp.Equals("int"))
		  {
		     tp = "Int32";
		  }else if(tp.Equals("string")){
		     tp = "String";		
		  }else{
		     tp = tp.Substring(0,1).ToUpper()+tp.Substring(1);
		  }
		  if(!tp.Equals("String") && c.Nullable)
		  {
		     nl = "OrNull";
		  }
		  #>
		  info.<#= feild#> = reader.Get<#= tp+nl#>("<#= c.Name#>");
		<#}#>
			return info;
		}

		/// <summary>
		/// 将实体对象的属性值转化为Hashtable对应的键值
		/// </summary>
		/// <param name="obj">有效的实体对象</param>
		/// <returns>包含键值映射的Hashtable</returns>
        protected override Hashtable GetHashByEntity(<#= className + "Entity"#> obj)
		{
            <#= className + "Entity"#> info = obj as <#= className + "Entity"#>;
			Hashtable hash = new Hashtable(); 
			
			 <#foreach(SOColumn c in list)
	    { if(c.Identify) continue;
	      //string feild = c.Name.Substring(0,1).ToUpper()+c.Name.Substring(1);	  
		  string feild = c.Name;#>
		  hash.Add("<#= c.Name#>", info.<#= feild#>);
		<#}#>
 				
			return hash;
		}

        /// <summary>
        /// 获取字段中文别名（用于界面显示）的字典集合
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, string> GetColumnNameAlias()
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            #region 添加别名解析
             <#foreach(SOColumn c in list)
	    { //string feild = c.Name.Substring(0,1).ToUpper()+c.Name.Substring(1);	  
		  string feild = c.Name;#>
		  dict.Add("<#= feild#>", "");
		<#}#>            
             #endregion

            return dict;
        }
		
        /// <summary>
        /// 指定具体的列表显示字段
        /// </summary>
        /// <returns></returns>
        public override string GetDisplayColumns()
        {
            return "<#= colStr.Substring(0,colStr.Length-1)#>";
        }
	}
}